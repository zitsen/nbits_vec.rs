var searchIndex = {};
searchIndex["nbits_vec"] = {"doc":"[![travis-badge][]][travis] [![release-badge][]][cargo] [![downloads]][cargo]\n[![docs-badge][]][docs] [![license-badge][]][license]","items":[[3,"NbitsVec","nbits_vec","Implement vector contains small `N`-bits values using `T::Block` as unit\nbuffer.",null,null],[0,"value","","",null,null],[8,"Value","nbits_vec::value","",null,null],[16,"Block","","The storage type of `Value`s.",0,null],[10,"nbits","","The value bit width.",0,{"inputs":[],"output":{"name":"usize"}}],[11,"one","","Return 1",0,{"inputs":[],"output":{"name":"block"}}],[11,"zero","","Return 0",0,{"inputs":[],"output":{"name":"block"}}],[11,"mask","","The value&#39;s bit mask in the `Block`.",0,{"inputs":[],"output":{"name":"block"}}],[11,"block_bits","","Bit-size of `Block`.",0,{"inputs":[],"output":{"name":"usize"}}],[11,"is_aligned","","Value is `aligned` when `block_bits` is divisible by `nbits`.",0,{"inputs":[],"output":{"name":"bool"}}],[11,"is_packed","","Value is `packed` when `block_bits` is equal to `nbits`.",0,{"inputs":[],"output":{"name":"bool"}}],[8,"ValueExt","","",null,null],[11,"raw_cap_from","","Converts capacity to storage size",1,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"cap_from","","Converts the storage size to capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"loc","","Converts the vector index to buf `(index, offset)` tuple.",1,null],[11,"bit_loc","","Converts bit index to buf `BitLoc`.",1,null],[11,"bit_offset","","Returns block offset of bit position `bit`.",1,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"bit_index","","Returns block index of bit position `bit`.",1,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[8,"OneBit","","",null,null],[8,"Packed","","",null,null],[8,"Aligned","","",null,null],[0,"consts","nbits_vec","",null,null],[4,"N1B8","nbits_vec::consts","",null,null],[4,"N1B16","","",null,null],[4,"N1B32","","",null,null],[4,"N1B64","","",null,null],[4,"N2B8","","",null,null],[4,"N2B16","","",null,null],[4,"N2B32","","",null,null],[4,"N2B64","","",null,null],[4,"N3B8","","",null,null],[4,"N3B16","","",null,null],[4,"N3B32","","",null,null],[4,"N3B64","","",null,null],[4,"N4B8","","",null,null],[4,"N4B16","","",null,null],[4,"N4B32","","",null,null],[4,"N4B64","","",null,null],[4,"N5B8","","",null,null],[4,"N5B16","","",null,null],[4,"N5B32","","",null,null],[4,"N5B64","","",null,null],[4,"N6B8","","",null,null],[4,"N6B16","","",null,null],[4,"N6B32","","",null,null],[4,"N6B64","","",null,null],[4,"N7B8","","",null,null],[4,"N7B16","","",null,null],[4,"N7B32","","",null,null],[4,"N7B64","","",null,null],[4,"N9B16","","",null,null],[4,"N9B32","","",null,null],[4,"N9B64","","",null,null],[4,"N10B16","","",null,null],[4,"N10B32","","",null,null],[4,"N10B64","","",null,null],[4,"N11B16","","",null,null],[4,"N11B32","","",null,null],[4,"N11B64","","",null,null],[4,"N12B16","","",null,null],[4,"N12B32","","",null,null],[4,"N12B64","","",null,null],[4,"N13B16","","",null,null],[4,"N13B32","","",null,null],[4,"N13B64","","",null,null],[4,"N14B16","","",null,null],[4,"N14B32","","",null,null],[4,"N14B64","","",null,null],[4,"N15B16","","",null,null],[4,"N15B32","","",null,null],[4,"N15B64","","",null,null],[4,"N17B32","","",null,null],[4,"N17B64","","",null,null],[4,"N18B32","","",null,null],[4,"N18B64","","",null,null],[4,"N19B32","","",null,null],[4,"N19B64","","",null,null],[4,"N20B32","","",null,null],[4,"N20B64","","",null,null],[4,"N21B32","","",null,null],[4,"N21B64","","",null,null],[4,"N22B32","","",null,null],[4,"N22B64","","",null,null],[4,"N23B32","","",null,null],[4,"N23B64","","",null,null],[4,"N24B32","","",null,null],[4,"N24B64","","",null,null],[4,"N25B32","","",null,null],[4,"N25B64","","",null,null],[4,"N26B32","","",null,null],[4,"N26B64","","",null,null],[4,"N27B32","","",null,null],[4,"N27B64","","",null,null],[4,"N28B32","","",null,null],[4,"N28B64","","",null,null],[4,"N29B32","","",null,null],[4,"N29B64","","",null,null],[4,"N30B32","","",null,null],[4,"N30B64","","",null,null],[4,"N31B32","","",null,null],[4,"N31B64","","",null,null],[4,"N33B64","","",null,null],[4,"N34B64","","",null,null],[4,"N35B64","","",null,null],[4,"N36B64","","",null,null],[4,"N37B64","","",null,null],[4,"N38B64","","",null,null],[4,"N39B64","","",null,null],[4,"N40B64","","",null,null],[4,"N41B64","","",null,null],[4,"N42B64","","",null,null],[4,"N43B64","","",null,null],[4,"N44B64","","",null,null],[4,"N45B64","","",null,null],[4,"N46B64","","",null,null],[4,"N47B64","","",null,null],[4,"N48B64","","",null,null],[4,"N49B64","","",null,null],[4,"N50B64","","",null,null],[4,"N51B64","","",null,null],[4,"N52B64","","",null,null],[4,"N53B64","","",null,null],[4,"N54B64","","",null,null],[4,"N55B64","","",null,null],[4,"N56B64","","",null,null],[4,"N57B64","","",null,null],[4,"N58B64","","",null,null],[4,"N59B64","","",null,null],[4,"N60B64","","",null,null],[4,"N61B64","","",null,null],[4,"N62B64","","",null,null],[4,"N63B64","","",null,null],[11,"nbits","","",2,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",3,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",4,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",5,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",6,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",7,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",8,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",9,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",10,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",11,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",12,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",13,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",14,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",15,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",16,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",17,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",18,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",19,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",20,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",21,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",22,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",23,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",24,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",25,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",26,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",27,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",28,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",29,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",30,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",31,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",32,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",33,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",34,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",35,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",36,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",37,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",38,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",39,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",40,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",41,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",42,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",43,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",44,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",45,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",46,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",47,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",48,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",49,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",50,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",51,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",52,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",53,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",54,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",55,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",56,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",57,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",58,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",59,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",60,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",61,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",62,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",63,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",64,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",65,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",66,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",67,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",68,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",69,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",70,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",71,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",72,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",73,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",74,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",75,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",76,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",77,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",78,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",79,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",80,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",81,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",82,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",83,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",84,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",85,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",86,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",87,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",88,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",89,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",90,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",91,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",92,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",93,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",94,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",95,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",96,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",97,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",98,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",99,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",100,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",101,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",102,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",103,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",104,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",105,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",106,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",107,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",108,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",109,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",110,{"inputs":[],"output":{"name":"usize"}}],[11,"nbits","","",111,{"inputs":[],"output":{"name":"usize"}}],[6,"N1","nbits_vec","",null,null],[6,"N2","","",null,null],[6,"N3","","",null,null],[6,"N4","","",null,null],[11,"new","","Constructs a new, empty NbitsVec&lt;N&gt;",112,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty Vec&lt;N&gt; with the specified capacity.",112,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw_parts","","Constructs a `NbitsVec&lt;T&gt;` directly from the raw components of another vector,\nlike [standard Vec][std::vec::Vec] does.",112,null],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",112,null],[11,"reserve","","Reserves capacity for at least additional more elements to be inserted in the given\nNbitsVec&lt;N&gt;.\nThe collection may reserve more space to avoid frequent reallocations.",112,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly additional more elements to be inserted in the\ngiven `NbitsVec&lt;N&gt;`. Does nothing if the capacity is already sufficient.",112,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",112,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",112,null],[11,"set_len","","Sets the length of a vector.",112,null],[11,"insert","","# Examples",112,null],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements\nafter position `index` one position to the left.",112,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing it with the last\nelement.",112,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",112,null],[11,"clear","","Simplely sets the `len` as 0.",112,null],[11,"len","","Returns the number of values.",112,null],[11,"bits","","Returns the number of bits in current length.",112,null],[11,"cap_bits","","Total bits in buf.",112,null],[11,"is_empty","","Returns whether or not the vector is empty.",112,null],[11,"push","","Appends an element to the back of a collection.",112,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it is empty.",112,null],[11,"resize","","Resizes the Vec in-place so that len() is equal to new_len.",112,null],[11,"align","","Move a value flag from `from` to `to`, mask or zero the interval bits.",112,null],[11,"fill","","Fill vector buf as `value` from `index` with size `length`.",112,null],[11,"set","","## Examples",112,null],[11,"set_raw_bits","","Set `length` bits of buf at `offset`th bit as `value`.",112,null],[11,"set_raw_bit","","Set buf unit bit at `index`th unit of `offset`bit.",112,null],[11,"get","","Get `N` bits value as `B`.",112,null],[11,"get_raw_bits","","Get `length` bits of buf at `offset`th bit.",112,null],[11,"get_raw_bit","","Get raw bit at `pos`.",112,null],[11,"raw_mut_ptr","","Returns mutable ptr of `T::Block`.",112,null],[11,"raw_ptr","","Returns ptr of `T::Block`.",112,null],[11,"as_raw_slice","","Return raw slice of `T::Block`.",112,null],[11,"as_mut_raw_slice","","Returns mutable raw slice of `T::Block`.",112,null],[11,"into_raw_boxed_slice","","Returns raw boxed slice of `T::Block`.",112,null],[11,"default","","",112,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",112,null],[11,"hash","","",112,null],[11,"eq","","",112,null],[11,"ne","","",112,null],[11,"clone","","",112,null],[11,"partial_cmp","","",112,null],[11,"cmp","","",112,null]],"paths":[[8,"Value"],[8,"ValueExt"],[4,"N1B8"],[4,"N1B16"],[4,"N1B32"],[4,"N1B64"],[4,"N2B8"],[4,"N2B16"],[4,"N2B32"],[4,"N2B64"],[4,"N3B8"],[4,"N3B16"],[4,"N3B32"],[4,"N3B64"],[4,"N4B8"],[4,"N4B16"],[4,"N4B32"],[4,"N4B64"],[4,"N5B8"],[4,"N5B16"],[4,"N5B32"],[4,"N5B64"],[4,"N6B8"],[4,"N6B16"],[4,"N6B32"],[4,"N6B64"],[4,"N7B8"],[4,"N7B16"],[4,"N7B32"],[4,"N7B64"],[4,"N9B16"],[4,"N9B32"],[4,"N9B64"],[4,"N10B16"],[4,"N10B32"],[4,"N10B64"],[4,"N11B16"],[4,"N11B32"],[4,"N11B64"],[4,"N12B16"],[4,"N12B32"],[4,"N12B64"],[4,"N13B16"],[4,"N13B32"],[4,"N13B64"],[4,"N14B16"],[4,"N14B32"],[4,"N14B64"],[4,"N15B16"],[4,"N15B32"],[4,"N15B64"],[4,"N17B32"],[4,"N17B64"],[4,"N18B32"],[4,"N18B64"],[4,"N19B32"],[4,"N19B64"],[4,"N20B32"],[4,"N20B64"],[4,"N21B32"],[4,"N21B64"],[4,"N22B32"],[4,"N22B64"],[4,"N23B32"],[4,"N23B64"],[4,"N24B32"],[4,"N24B64"],[4,"N25B32"],[4,"N25B64"],[4,"N26B32"],[4,"N26B64"],[4,"N27B32"],[4,"N27B64"],[4,"N28B32"],[4,"N28B64"],[4,"N29B32"],[4,"N29B64"],[4,"N30B32"],[4,"N30B64"],[4,"N31B32"],[4,"N31B64"],[4,"N33B64"],[4,"N34B64"],[4,"N35B64"],[4,"N36B64"],[4,"N37B64"],[4,"N38B64"],[4,"N39B64"],[4,"N40B64"],[4,"N41B64"],[4,"N42B64"],[4,"N43B64"],[4,"N44B64"],[4,"N45B64"],[4,"N46B64"],[4,"N47B64"],[4,"N48B64"],[4,"N49B64"],[4,"N50B64"],[4,"N51B64"],[4,"N52B64"],[4,"N53B64"],[4,"N54B64"],[4,"N55B64"],[4,"N56B64"],[4,"N57B64"],[4,"N58B64"],[4,"N59B64"],[4,"N60B64"],[4,"N61B64"],[4,"N62B64"],[4,"N63B64"],[3,"NbitsVec"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,null],[10,"swap_bytes","","Reverses the byte order of the integer.",15,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,null],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
initSearch(searchIndex);
